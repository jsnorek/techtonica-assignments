import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';
import dotenv from 'dotenv';
import db from './db/db-connection.js';

const { query } = db;

dotenv.config();

const app = express();
const PORT = 8080;

app.use(cors());

app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

//api key
// const api_key = process.env.api_key

// test route
app.get("/", (req, res) => {
    res.json("Hello to your blog server!");
});

app.get('/reviews', async (req, res) => {
    try {
        const { rows: reviews } = await db.query(`
            SELECT reviews.*, games.title
            FROM reviews
            JOIN games ON reviews.game_id = games.game_id
            `);
        res.send(reviews);
    } catch (e) {
        console.log('error getting reviews', e);
        return res.status(400).json({ error: e.message });
    }
});

app.get('/games', async (req, res) => {
    try {
        const { rows: games } = await db.query(`SELECT * FROM games`);
        res.send(games);
    } catch (e) {
        console.log('error getting games list', error);
        return res.status(400).json({ error: e.message });
    } 
});

app.get('/game-details/:game_id', async (req, res) => {
    const game_id = req.params.game_id;
    try {
        const result = await db.query(`
            SELECT games.*, reviews.rating
            FROM games
            JOIN reviews ON games.game_id = reviews.game_id
            WHERE games.game_id = $1
            `, [game_id]);
        res.send(result.rows);
    } catch (e) {
        console.log('error getting game info', e);
        return res.status(400).json({ error: e.message });
    }
});

app.post('/reviews', async (req, res) => {
    try {
        const newReview = {
            reviewer_name: req.body.reviewer_name,
            game_id: req.body.game_id,
            rating: req.body.rating,
            review_text: req.body.review_text
        };
        console.log([newReview.reviewer_name, newReview.game_id, newReview.rating, newReview.review_text]);
        const result = await db.query(
            "INSERT INTO reviews(reviewer_name, game_id, rating, review_text) VALUES($1, $2, $3, $4) RETURNING *",
            [newReview.reviewer_name, newReview.game_id, newReview.rating, newReview.review_text]
        );
        console.log(result.rows[0]);
        res.json(result.rows[0]);
    } catch (e) {
        console.log('error adding review', e);
        return res.status(400).json({ error: e.message });
    }
});

app.delete("/reviews/:review_id", async (req, res) => {
    try {
        const review_id = req.params.review_id;
        await db.query("DELETE FROM reviews WHERE review_id=$1", [review_id]);
        console.log("From the delete request-url", review_id);
        res.status(200).end();
    } catch (e) {
        console.log('error deleting review', e);
        return res.status(400).json({ error: e.message });
    }
});

/// Summarize review endpoint
app.post("/summarize", async (req, res) => {
    const review_text = req.body.review_text; //extracting review_text from the request body
    //checking if the review_text was provided and returns an error if it was not
    if (!review_text) {
        return res.status(400).json({ error: 'review text is required' });
    }

    try {
        const response = await fetch('https://api.openai.com/v1/chat/completions', { // http from openai.com docs - it creates model response 
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${process.env.OPENAI_API_KEY}`, 
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini', // ID of the openAI model
                messages: [
                    {
                        role: 'system',
                        content: 'You are a helpful assistant that summarizes text in 30 words or less.'
                    },
                    {
                        role: 'user',
                        content: `Summarize this review in 30 words or less: ${review_text}`
                    }
                ],
                max_tokens: 50,  // Adjust token limit for summary length 100 tokens is about 75 words
            }),
        });

        const data = await response.json(); // Converts JSON response from openAI to JS object
        console.log('OpenAI response:', data);  // Logs the entire response to inspect response structure

        if (data.choices && data.choices.length > 0) { // Checks if there is a valid response from openAI. Responses typically contain a choice array (listed in docs)
            const summary = data.choices[0].message.content.trim(); // Summary text generated by openAI
            res.json({ summary });
        } else {
            res.status(500).json({ error: 'No summary generated' });
        }
    } catch (error) {
        console.error('Error summarizing review:', error);
        res.status(500).json({ error: 'Failed to summarize review' });
    }
});


app.listen(PORT, () => {
    console.log(`Hi, server listening on ${PORT}`);
});
export default app;